# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
# üìå –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –≤
# –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç start –¥–æ stop —Å —à–∞–≥–æ–º step.
# üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Å—á–∏—Ç–∞–µ–º step=1.
# üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ–º start=1.
class FactorialGenerator:
    def __init__(self, *args):
        match len(args):
            case 3:
                self.start = args[0]
                self.stop = args[1]
                self.step = args[2]
            case 2:
                self.start = args[0]
                self.stop = args[1]
                self.step = 1
            case 1:
                self.start = 1
                self.stop = args[0]
                self.step = 1
            case _:
                self.start = 1
                self.stop = 1
                self.step = 1
        self.factorial = self.start

    def __iter__(self):
        return self

    def __next__(self):
        while self.start < self.stop:
            self.start += self.step
            self.factorial *= self.start
            return self.factorial
        raise StopIteration


if __name__ == '__main__':
    fact = FactorialGenerator(5)
    for number in fact:
        print(number)
